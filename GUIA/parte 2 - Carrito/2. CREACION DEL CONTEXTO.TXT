CREACION DEL CONTEXTO.

porque creamos un contexto:
porque necesitamos un estado global que controle la cantidad de productos, ya que cambiara tanto el la lista de los productos como en el  aside del carrito.

//1. creacion del contexto
export const CartContext = createContext();

//2. creacion de Provider



export function CartProvider({ children }) {

  const [Cart, setCart] = useState([]);
// a.  creamos el estado que vamos a necesitar cart y setCart cmo un array vacio, que se va a llenar con la cantidad de productos y el clearCart, que volvera al array vacion.

// b. creamos las funciones que permitiran: anadir:

  const addToCart = (product) => {
   const productInCartIndex = Cart.findIndex(item=> item.id === product.id)
  };

COMO FUNCIONA ESTA FUNCION DE ANADIR:
1) VERIFICAR SI ESTA EL PRODUCTO QUE VAMOS A AGREGAR EN EL CARRITO: productInCartIndex.

para esto creamos la funcion productInCartIndex con un findIndex.

findIndex: este metodo va a encontrar el index del primer elemento de un array que cumpla ciertas condiciones en este caso son:

condicion: que el id del item del array cart sea igual al id de la lista de productos.

que devuelve ==> si encuentra el que cumpla la condicion, devuelve el numero de ID
             ==> sino lo encuentra, devuelve -1.

2) QUE HACEMOS SI ENCUENTRA UN ELEMENTO QUE CUMPLE ESTA CONDICION:


si lo encuentra,quiere decir que el producto ya esta en el carrito, creamos un UN CLON del array Cart con (structuredClone) y a este nuevo carrito se le incrementa en 1 la propiedad quantity o cantidad, para indicar que se agrego una unidad mas del carrito.












  // funcion limpiar
  const clearToCart = () => {
    setCart([]);
  };

  <CartContext.Provider
    value={{
      Cart,
      addToCart,
      clearToCart,
    }}
  >
    {children}
  </CartContext.Provider>;
}
