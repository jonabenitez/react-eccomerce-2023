ES UN CONTEXTO EN REACT: ESTE NOS SIRVE PARA NO PASAR PROPS INECESARIAS

si ahora vemos como tenemos la aplicacion, el componente app es el que orquesta todo, se encarga de pasar estas 3 props:

 <Header changeFilters={setfilters} /> 
 <Products Products={filteredProduct} />
 <Footer filters={filters} />

 lo mejor seria que SOLO LOS COMPONENTES que realmente necesitan leer los filtros, puedan acceder.
                    A
 DE  COMPONENTES ------> FILTROS    (V)

 Y NO filtros(APP)X-----> componentes (X)

 aqui es donde entra el CONTEXTO:
 
 FUNCION: los componentes que quieran el estado de los filtros lo guardamos en un contexto y aquel que lo quiera, lo leera del contexto.
 es un almacen que guarda la logica de los filtros en una parte separada y cualquier componente lo pueda leer directamente sin necesidad que se lo pasen.
 ESTE SE ENCUENTRA TOTALMENTE SEPARADO DEL ARBOL DE COMPONENTE Y TODOS TIENEN ACCESO.

 pero como saben los componentes que ahora pueden leer de este contexto??

 esto se debe a COMO ESTA FORMADO EL CONTEXTO:
 1. por el contexto en si mismo: FiltersContext.
 2. un embolvente o proveder: filtersContextProveder (definimos todo lo que envolvemos tiene acceso al contexto)

 entonces, se resumen en 3 simples pasos:


1) CREAR EL CONTEXTO:     filtersContext.
2) PROVEER EL CONTEXTO:   filtersContextProveder. envolver a los componentes que quiero que lean el contexto
3) CONSUMIR EL CONTEXTO:  desde filters consumir este contexto


1) creacion del contexto
creamos el archivo Filters.jsx / importamos el create context y lo creamos vacio.

export const FitersContext = createContext()

2) creacion del PROVIDER (funcion).
 aqui se crea primero de manera estatica, los datos que necesita lo transcribimos en el provider.

export function FiltersProvider({ children }) {
  <FiltersContext.Provider
    value={{
      category: "all",
      minPrice: 0,
    }}
  >
    {children}
  </FiltersContext.Provider>;

// esta es la info que necesita nuestra app para funcionar.
// estamos diciendo: que el FiltersContext (el contexto) acceda al .Provider  que tiene como valor category y value. (POR AHORA)

2.b)_ Que definimos como children? APP
en el index.jsx envolvemos app con el FiltersContext.Provider

                <FiltersProvider>
                <App />
                </FiltersProvider>

3) CONSUMIR EL CONTEXTO

dentro de APP ---> DENTRO DEL CustomHook.
reemplazamos la definicion de los Filters para consumirla directamente desde lo que definimos en useContext.


  const [filters, setfilters] = useState({
    category: "all",
    minPrice: "0",                          ============   REMPLAZO POR  ===>  useContext(FiltersContext)
  }); 


 **  PERO ACA SURGE UN PROBLEMA **
 porque hasta ahora no funciona porque no tenemos el setFilters en nuestro contexto,esto lo vuelve estatico, no tenemos el estado, para eso actualizamos el Provider.

 para esto devemos redefinir el Provedor del contexto agregando un ESTADO.

 NUEVA DEFINICION DEL PROVIDER

 
export function FiltersProvider ({children}){

// redefinimos los filtros pero ahora con estado, de forma dinamica.
const [filters, setfilters] = useState({
  category:'all',
  minPrice:0
  })

  return <FiltersContext.Provider value={{filters,setfilters}}
    >{
      children}
    </FiltersContext.Provider>
}

extramos en app dentro del hook este filters y el setfilters y listo."
APP:    const {filters,setfilters} = useContext(FiltersContext)

////          FIN DE LA CREACION DEL CONTEXTO                    /////

CUANDO USAR USE CONTEXT:

COMO ESTADO GLOBAL PARA ESTADOS MUY PEQUENOS Y CAMBIEN CON POCA FRECUENCIA.
. INICIO Y CIERRE DE SESION.

CAMBIOS DE ESTADOS MUY GRANDES Y COMPLEJOS
. SUSTANCE
. REDUX
