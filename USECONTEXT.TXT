ES UN CONTEXTO EN REACT: ESTE NOS SIRVE PARA NO PASAR PROPS INECESARIAS

si ahora vemos como tenemos la aplicacion, el componente app es el que orquesta todo, se encarga de pasar estas 3 props:

 <Header changeFilters={setfilters} /> 
 <Products Products={filteredProduct} />
 <Footer filters={filters} />

 lo mejor seria que SOLO LOS COMPONENTES que realmente necesitan leer los filtros, puedan acceder.
                    A
 DE  COMPONENTES ------> FILTROS    (V)

 Y NO filtros(APP)X-----> componentes (X)

 aqui es donde entra el CONTEXTO:
 
 FUNCION: los componentes que quieran el estado de los filtros lo guardamos en un contexto y aquel que lo quiera, lo leera del contexto.
 es un almacen que guarda la logica de los filtros en una parte separada y cualquier componente lo pueda leer directamente sin necesidad que se lo pasen.
 ESTE SE ENCUENTRA TOTALMENTE SEPARADO DEL ARBOL DE COMPONENTE Y ESTOS COMPONENTES LEER ESTOS DATOS.
 
 pero como saben los componentes que ahora pueden leer de este contexto??

 esto se debe a COMO ESTA FORMADO EL CONTEXTO:

 1. por el contexto en si mismo: FiltersContext
 2. un embolvente o proveder: filtersContextProveder (definimos todo lo que envolvemos tiene acceso al contexto)

 entonces, se resumen en 3 simples pasos:


1) CREAR EL CONTEXTO:     filtersContext
2) PROVEER EL CONTEXTO:   filtersContextProveder envolver a los componentes que quiero que lean el contexto
3) CONSUMIR EL CONTEXTO:  desde filters consumir este contexto


1_ creacion del contexto
creamos el archivo filters.js / importamos el create context y lo creamos vacio.

export const FitersContext = createContext()





 